/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/X3regWvP2Ez
**/
"use client"

import { useState, useEffect } from "react";
import { Select, SelectContent, SelectItem } from "@/components/ui/select";
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { TaskController } from "@/controllers/Taskcontroller"; 
import { Task } from "@/models/Task";

export function TaskManager() {
  const taskController = new TaskController();

  const [tasks, setTasks] = useState<Task[]>([]);
  const [newTask, setNewTask] = useState({id:"", title: "", description: "", dueDate: "",status:"" });
  const [filter, setFilter] = useState("all");

  useEffect(() => {
    fetchTasks();
  }, []);

  const fetchTasks = async () => {
    try {
      const data = await taskController.getAllTasks();
      setTasks(data);
    } catch (error) {
      console.error(error);
    }
  };

  const handleCreateTask = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      const createdTask = await taskController.createTask(newTask);
      setTasks([...tasks, createdTask]);
      setNewTask({id:"", title: "", description: "", dueDate: "", status:"" });
    } catch (error) {
      console.error(error);
    }
  };

  const handleDeleteTask = async (taskId: string) => {
    try {
      await taskController.deleteTask(taskId);
      setTasks(tasks.filter(task => task.id !== taskId));
    } catch (error) {
      console.error(error);
    }
  };

  const handleChangeStatus = async (taskId: string, newStatus: string) => {
    try {
      const updatedTask = await taskController.changeTaskStatus(taskId, newStatus);
      setTasks(tasks.map(task => (task.id === taskId ? updatedTask : task)));
    } catch (error) {
      console.error(error);
    }
  };

  const filteredTasks = tasks.filter(task => {
    if (filter === "all") return true;
    if (filter === "completed") return task.status === true;
    if (filter === "incomplete") return task.status === false;
    return true;
  });

  return (
    <div className="flex flex-col h-screen">
      <header className="bg-primary text-primary-foreground py-4 px-6 shadow">
        <div className="container mx-auto flex items-center justify-between">
          <h1 className="text-2xl font-bold">Task Manager</h1>
        </div>
      </header>
      <main className="flex-1 container mx-auto py-8 px-6">
        <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
          <div className="col-span-2">
            <div className="mb-6">
              <h2 className="text-xl font-bold mb-2">Task List</h2>
              <div className="flex items-center mb-4">
                <Select value={filter} onValueChange={setFilter}>
                  <SelectContent>
                    <SelectItem value="all">All</SelectItem>
                    <SelectItem value="completed">Completed</SelectItem>
                    <SelectItem value="incomplete">Incomplete</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Title</TableHead>
                    <TableHead>Description</TableHead>
                    <TableHead>Due Date</TableHead>
                    <TableHead>Status</TableHead>
                    <TableHead>Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {filteredTasks.map(task => (
                    <TableRow key={task.id}>
                      <TableCell>{task.title}</TableCell>
                      <TableCell>{task.description}</TableCell>
                      <TableCell>{task.dueDate}</TableCell>
                      <TableCell>
                        <Badge variant={task.status === "completed" ? "primary" : "secondary"}>
                          {task.status === "completed" ? "completed" : "Incomplete"}
                        </Badge>
                      </TableCell>
                      <TableCell>
                        <div className="flex items-center gap-2">
                          <Button
                            size="sm"
                            onClick={() =>
                              handleChangeStatus(task.id, task.status === "completed" ? "incomplete" : "completed")
                            }
                          >
                            {task.status === "completed" ? "Mark Incomplete" : "Complete"}
                          </Button>
                          <Button variant="secondary" size="sm" onClick={() => handleDeleteTask(task.id)}>
                            Delete
                          </Button>
                        </div>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </div>
          </div>
          <div>
            <div className="mb-6">
              <h2 className="text-xl font-bold mb-2">Create Task</h2>
              <form onSubmit={handleCreateTask}>
                <div className="mb-4">
                  <Label htmlFor="title">Title</Label>
                  <Input
                    id="title"
                    value={newTask.title}
                    onChange={(e) => setNewTask({ ...newTask, title: e.target.value })}
                    required
                  />
                </div>
                <div className="mb-4">
                  <Label htmlFor="description">Description</Label>
                  <Textarea
                    id="description"
                    value={newTask.description}
                    onChange={(e) => setNewTask({ ...newTask, description: e.target.value })}
                    required
                  />
                </div>
                <div className="mb-4">
                  <Label htmlFor="dueDate">Due Date</Label>
                  <Input
                    id="dueDate"
                    type="date"
                    value={newTask.dueDate}
                    onChange={(e) => setNewTask({ ...newTask, dueDate: e.target.value })}
                    required
                  />
                </div>
                <Button type="submit">Save Task</Button>
              </form>
            </div>
          </div>
        </div>
      </main>
    </div>
  );
}